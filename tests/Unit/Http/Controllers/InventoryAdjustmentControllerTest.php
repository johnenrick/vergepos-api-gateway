<?php

namespace Tests\Unit\Http\Controllers;

use Tests\TestCase;
use Illuminate\Http\Request;
use App\Http\Controllers\InventoryAdjustmentController;
use App;
use Mockery as m;

class InventoryAdjustmentControllerTest extends TestCase
{
    /**
     * Test that batchCreate computes a deterministic client_uuid (sha1 fingerprint),
     * strips HTML from remarks, and unsets id/db_id before calling insertNewInventoryAdjustments.
     *
     * This is a unit test: no DB is used. We mock the controller's methods that touch DB.
     */
    public function test_batch_create_generates_client_uuid_and_sanitizes_entries()
    {
        // Build a partial mock of the controller to stub DB-calling methods.
        $controller = $this->getMockBuilder(\App\Http\Controllers\InventoryAdjustmentController::class)
            ->setMethods(['insertNewInventoryAdjustments', 'groupSyncInventoryAdjustments', 'getUpdatedInventoryadjustments'])
            ->getMock();

        // Prepare a sample payload with one inventory adjustment.
        $payload = [
            'last_datetime_update' => '2021-01-01 00:00:00',
            'store_id' => 5,
            'inventory_adjustments' => [
                [
                    'product_id' => 10,
                    'user_id' => 2,
                    'type' => 1,
                    'quantity' => 3,
                    'previous_quantity' => 0,
                    'created_at' => '2021-09-01 10:00:00',
                    'updated_at' => '2021-09-01 10:00:00',
                    'remarks' => '<b>Note</b>',
                    'id' => 123,
                    'db_id' => 456
                ]
            ]
        ];

        // Compute expected client_uuid exactly as the controller does:
        $entry = $payload['inventory_adjustments'][0];
        $fingerprintSource = sprintf(
            '%s|%s|%s|%s|%s|%s|%s',
            $payload['store_id'],
            $entry['product_id'],
            $entry['user_id'],
            $entry['type'],
            (string)$entry['quantity'],
            (string)$entry['previous_quantity'],
            $entry['created_at']
        );
        $expectedClientUuid = sha1($fingerprintSource);
        $expectedSanitizedRemarks = strip_tags($entry['remarks']);

        // Expect insertNewInventoryAdjustments to be called once with the processed array.
        $controller->expects($this->once())
            ->method('insertNewInventoryAdjustments')
            ->with($this->callback(function ($inventoryAdjustments) use ($expectedClientUuid, $expectedSanitizedRemarks) {
                // The controller passes an array of entries. We assert fields were normalized.
                $this->assertIsArray($inventoryAdjustments);
                $this->assertCount(1, $inventoryAdjustments);

                $first = $inventoryAdjustments[0];

                // id and db_id must be removed
                $this->assertArrayNotHasKey('id', $first);
                $this->assertArrayNotHasKey('db_id', $first);

                // remarks should be sanitized
                $this->assertArrayHasKey('remarks', $first);
                $this->assertEquals($expectedSanitizedRemarks, $first['remarks']);

                // client_uuid must be present and match expected fingerprint
                $this->assertArrayHasKey('client_uuid', $first);
                $this->assertEquals($expectedClientUuid, $first['client_uuid']);

                // store_id must be present and equal to payload store_id
                $this->assertArrayHasKey('store_id', $first);
                $this->assertEquals(5, $first['store_id']);

                return true;
            }))
            ->willReturn([1]); // stub an inserted id return

        // Avoid groupSyncInventoryAdjustments calling DB — stub it to do nothing
        $controller->expects($this->once())->method('groupSyncInventoryAdjustments')->with($this->isType('array'), $this->equalTo(5), $this->equalTo('2021-01-01 00:00:00'));

        // Avoid getUpdatedInventoryadjustments DB calls — return empty array
        $controller->expects($this->once())->method('getUpdatedInventoryadjustments')->with('2021-01-01 00:00:00', 5)->willReturn([]);

        // Build a Request and call batchCreate
        $request = Request::create('/','POST', $payload);

        // Call the controller action
        $response = $controller->batchCreate($request);

        // The controller returns a Response generated by its responseGenerator.
        // We check it returned something and that the expected inserted id is present in the JSON.
        $this->assertNotNull($response);

        // If response is JsonResponse, attempt to decode and assert new_inventory_adjustment_ids exist.
        if (method_exists($response, 'getContent')) {
            $content = json_decode($response->getContent(), true);
            $this->assertArrayHasKey('data', $content);
            $data = $content['data'];
            $this->assertArrayHasKey('new_inventory_adjustment_ids', $data);
            $this->assertEquals([1], $data['new_inventory_adjustment_ids']);
        }
    }
}
